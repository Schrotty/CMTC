//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Cymbol.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class CymbolParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		STRING=25, BOOL=26, ID=27, INT=28, WS=29, COMMENT=30;
	public const int
		RULE_file = 0, RULE_functionDecl = 1, RULE_formalParameters = 2, RULE_formalParameter = 3, 
		RULE_stat = 4, RULE_block = 5, RULE_assignStat = 6, RULE_ifStat = 7, RULE_forStat = 8, 
		RULE_returnStat = 9, RULE_args = 10, RULE_printStat = 11, RULE_varDecl = 12, 
		RULE_type = 13, RULE_expr = 14;
	public static readonly string[] ruleNames = {
		"file", "functionDecl", "formalParameters", "formalParameter", "stat", 
		"block", "assignStat", "ifStat", "forStat", "returnStat", "args", "printStat", 
		"varDecl", "type", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "','", "';'", "'{'", "'}'", "'='", "'if'", "'else'", 
		"'for'", "'return'", "'printf'", "'int'", "'-'", "'!'", "'*'", "'/'", 
		"'+'", "'=='", "'!='", "'<'", "'>'", "'?'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "STRING", "BOOL", "ID", "INT", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Cymbol.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CymbolParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CymbolParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CymbolParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class FileContext : ParserRuleContext {
		public FunctionDeclContext[] functionDecl() {
			return GetRuleContexts<FunctionDeclContext>();
		}
		public FunctionDeclContext functionDecl(int i) {
			return GetRuleContext<FunctionDeclContext>(i);
		}
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICymbolVisitor<TResult> typedVisitor = visitor as ICymbolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 32;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 30; functionDecl();
					}
					break;
				case 2:
					{
					State = 31; varDecl();
					}
					break;
				}
				}
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__12 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(CymbolParser.ID, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICymbolVisitor<TResult> typedVisitor = visitor as ICymbolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_functionDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; type();
			State = 37; Match(ID);
			State = 38; Match(T__0);
			State = 40;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 39; formalParameters();
				}
			}

			State = 42; Match(T__1);
			State = 43; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		public FormalParameterContext[] formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICymbolVisitor<TResult> typedVisitor = visitor as ICymbolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(Context, State);
		EnterRule(_localctx, 4, RULE_formalParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45; formalParameter();
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 46; Match(T__2);
				State = 47; formalParameter();
				}
				}
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(CymbolParser.ID, 0); }
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICymbolVisitor<TResult> typedVisitor = visitor as ICymbolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(Context, State);
		EnterRule(_localctx, 6, RULE_formalParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; type();
			State = 54; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public IfStatContext ifStat() {
			return GetRuleContext<IfStatContext>(0);
		}
		public ForStatContext forStat() {
			return GetRuleContext<ForStatContext>(0);
		}
		public ReturnStatContext returnStat() {
			return GetRuleContext<ReturnStatContext>(0);
		}
		public AssignStatContext assignStat() {
			return GetRuleContext<AssignStatContext>(0);
		}
		public PrintStatContext printStat() {
			return GetRuleContext<PrintStatContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICymbolVisitor<TResult> typedVisitor = visitor as ICymbolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 8, RULE_stat);
		try {
			State = 72;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56; block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57; varDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 58; ifStat();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 59; forStat();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 60; returnStat();
				State = 61; Match(T__3);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 63; assignStat();
				State = 64; Match(T__3);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 66; printStat();
				State = 67; Match(T__3);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 69; expr(0);
				State = 70; Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICymbolVisitor<TResult> typedVisitor = visitor as ICymbolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(T__4);
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__7) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << ID) | (1L << INT))) != 0)) {
				{
				{
				State = 75; stat();
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 81; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStatContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CymbolParser.ID, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.EnterAssignStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.ExitAssignStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICymbolVisitor<TResult> typedVisitor = visitor as ICymbolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignStatContext assignStat() {
		AssignStatContext _localctx = new AssignStatContext(Context, State);
		EnterRule(_localctx, 12, RULE_assignStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; Match(ID);
			State = 84; Match(T__6);
			State = 85; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public IfStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.EnterIfStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.ExitIfStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICymbolVisitor<TResult> typedVisitor = visitor as ICymbolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatContext ifStat() {
		IfStatContext _localctx = new IfStatContext(Context, State);
		EnterRule(_localctx, 14, RULE_ifStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87; Match(T__7);
			State = 88; Match(T__0);
			State = 89; expr(0);
			State = 90; Match(T__1);
			State = 91; stat();
			State = 94;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 92; Match(T__8);
				State = 93; stat();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatContext : ParserRuleContext {
		public AssignStatContext[] assignStat() {
			return GetRuleContexts<AssignStatContext>();
		}
		public AssignStatContext assignStat(int i) {
			return GetRuleContext<AssignStatContext>(i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.EnterForStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.ExitForStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICymbolVisitor<TResult> typedVisitor = visitor as ICymbolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatContext forStat() {
		ForStatContext _localctx = new ForStatContext(Context, State);
		EnterRule(_localctx, 16, RULE_forStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(T__9);
			State = 97; Match(T__0);
			State = 98; assignStat();
			State = 99; Match(T__3);
			State = 100; expr(0);
			State = 101; Match(T__3);
			State = 102; assignStat();
			State = 103; Match(T__1);
			State = 104; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.EnterReturnStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.ExitReturnStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICymbolVisitor<TResult> typedVisitor = visitor as ICymbolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatContext returnStat() {
		ReturnStatContext _localctx = new ReturnStatContext(Context, State);
		EnterRule(_localctx, 18, RULE_returnStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; Match(T__10);
			State = 107; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICymbolVisitor<TResult> typedVisitor = visitor as ICymbolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 20, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; expr(0);
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 110; Match(T__2);
				State = 111; expr(0);
				}
				}
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PrintStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.EnterPrintStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.ExitPrintStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICymbolVisitor<TResult> typedVisitor = visitor as ICymbolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatContext printStat() {
		PrintStatContext _localctx = new PrintStatContext(Context, State);
		EnterRule(_localctx, 22, RULE_printStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(T__11);
			State = 118; Match(T__0);
			State = 119; expr(0);
			State = 120; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(CymbolParser.ID, 0); }
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICymbolVisitor<TResult> typedVisitor = visitor as ICymbolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 24, RULE_varDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; type();
			State = 123; Match(ID);
			State = 124; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICymbolVisitor<TResult> typedVisitor = visitor as ICymbolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 26, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MethodCallExprContext : ExprContext {
		public ITerminalNode ID() { return GetToken(CymbolParser.ID, 0); }
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public MethodCallExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.EnterMethodCallExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.ExitMethodCallExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICymbolVisitor<TResult> typedVisitor = visitor as ICymbolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.EnterNotExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.ExitNotExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICymbolVisitor<TResult> typedVisitor = visitor as ICymbolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AddSubExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.EnterAddSubExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.ExitAddSubExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICymbolVisitor<TResult> typedVisitor = visitor as ICymbolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSubExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracketExprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BracketExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.EnterBracketExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.ExitBracketExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICymbolVisitor<TResult> typedVisitor = visitor as ICymbolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShortIfExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ShortIfExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.EnterShortIfExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.ExitShortIfExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICymbolVisitor<TResult> typedVisitor = visitor as ICymbolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortIfExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiDivExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MultiDivExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.EnterMultiDivExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.ExitMultiDivExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICymbolVisitor<TResult> typedVisitor = visitor as ICymbolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiDivExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdContext : ExprContext {
		public ITerminalNode ID() { return GetToken(CymbolParser.ID, 0); }
		public IdContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICymbolVisitor<TResult> typedVisitor = visitor as ICymbolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubExprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SubExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.EnterSubExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.ExitSubExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICymbolVisitor<TResult> typedVisitor = visitor as ICymbolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExprContext {
		public ITerminalNode INT() { return GetToken(CymbolParser.INT, 0); }
		public IntContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICymbolVisitor<TResult> typedVisitor = visitor as ICymbolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompareExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CompareExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.EnterCompareExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICymbolListener typedListener = listener as ICymbolListener;
			if (typedListener != null) typedListener.ExitCompareExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICymbolVisitor<TResult> typedVisitor = visitor as ICymbolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				_localctx = new SubExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 129; Match(T__13);
				State = 130; expr(10);
				}
				break;
			case 2:
				{
				_localctx = new NotExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 131; Match(T__14);
				State = 132; expr(9);
				}
				break;
			case 3:
				{
				_localctx = new IdContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 133; Match(ID);
				}
				break;
			case 4:
				{
				_localctx = new IntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 134; Match(INT);
				}
				break;
			case 5:
				{
				_localctx = new BracketExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 135; Match(T__0);
				State = 136; expr(0);
				State = 137; Match(T__1);
				}
				break;
			case 6:
				{
				_localctx = new MethodCallExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 139; Match(ID);
				State = 140; Match(T__0);
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__13) | (1L << T__14) | (1L << ID) | (1L << INT))) != 0)) {
					{
					State = 141; args();
					}
				}

				State = 144; Match(T__1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 164;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 162;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new MultiDivExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 147;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 148;
						_la = TokenStream.LA(1);
						if ( !(_la==T__15 || _la==T__16) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 149; expr(9);
						}
						break;
					case 2:
						{
						_localctx = new AddSubExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 150;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 151;
						_la = TokenStream.LA(1);
						if ( !(_la==T__13 || _la==T__17) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 152; expr(8);
						}
						break;
					case 3:
						{
						_localctx = new CompareExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 153;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 154;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 155; expr(7);
						}
						break;
					case 4:
						{
						_localctx = new ShortIfExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 156;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 157; Match(T__22);
						State = 158; expr(0);
						State = 159; Match(T__23);
						State = 160; expr(6);
						}
						break;
					}
					} 
				}
				State = 166;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ' ', '\xAA', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x3', '\x2', '\x6', '\x2', '#', '\n', '\x2', '\r', '\x2', '\xE', 
		'\x2', '$', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '+', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x33', '\n', '\x4', '\f', 
		'\x4', '\xE', '\x4', '\x36', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'K', '\n', '\x6', '\x3', '\a', 
		'\x3', '\a', '\a', '\a', 'O', '\n', '\a', '\f', '\a', '\xE', '\a', 'R', 
		'\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x61', '\n', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', 
		'\f', 's', '\n', '\f', '\f', '\f', '\xE', '\f', 'v', '\v', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\x91', '\n', '\x10', '\x3', '\x10', '\x5', '\x10', '\x94', '\n', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\a', '\x10', '\xA5', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xA8', 
		'\v', '\x10', '\x3', '\x10', '\x2', '\x3', '\x1E', '\x11', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', '\x2', '\x5', '\x3', '\x2', '\x12', '\x13', '\x4', 
		'\x2', '\x10', '\x10', '\x14', '\x14', '\x3', '\x2', '\x15', '\x18', '\x2', 
		'\xB2', '\x2', '\"', '\x3', '\x2', '\x2', '\x2', '\x4', '&', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '/', '\x3', '\x2', '\x2', '\x2', '\b', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\n', 'J', '\x3', '\x2', '\x2', '\x2', '\f', 'L', 
		'\x3', '\x2', '\x2', '\x2', '\xE', 'U', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x12', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\x14', 'l', '\x3', '\x2', '\x2', '\x2', '\x16', 'o', '\x3', '\x2', 
		'\x2', '\x2', '\x18', 'w', '\x3', '\x2', '\x2', '\x2', '\x1A', '|', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x80', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x93', '\x3', '\x2', '\x2', '\x2', ' ', '#', '\x5', '\x4', '\x3', '\x2', 
		'!', '#', '\x5', '\x1A', '\xE', '\x2', '\"', ' ', '\x3', '\x2', '\x2', 
		'\x2', '\"', '!', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', 
		'\x2', '\x2', '$', '\"', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x3', 
		'\x2', '\x2', '\x2', '%', '\x3', '\x3', '\x2', '\x2', '\x2', '&', '\'', 
		'\x5', '\x1C', '\xF', '\x2', '\'', '(', '\a', '\x1D', '\x2', '\x2', '(', 
		'*', '\a', '\x3', '\x2', '\x2', ')', '+', '\x5', '\x6', '\x4', '\x2', 
		'*', ')', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', 
		'+', ',', '\x3', '\x2', '\x2', '\x2', ',', '-', '\a', '\x4', '\x2', '\x2', 
		'-', '.', '\x5', '\f', '\a', '\x2', '.', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x34', '\x5', '\b', '\x5', '\x2', '\x30', '\x31', '\a', '\x5', '\x2', 
		'\x2', '\x31', '\x33', '\x5', '\b', '\x5', '\x2', '\x32', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x36', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\a', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x38', '\x5', '\x1C', '\xF', '\x2', '\x38', 
		'\x39', '\a', '\x1D', '\x2', '\x2', '\x39', '\t', '\x3', '\x2', '\x2', 
		'\x2', ':', 'K', '\x5', '\f', '\a', '\x2', ';', 'K', '\x5', '\x1A', '\xE', 
		'\x2', '<', 'K', '\x5', '\x10', '\t', '\x2', '=', 'K', '\x5', '\x12', 
		'\n', '\x2', '>', '?', '\x5', '\x14', '\v', '\x2', '?', '@', '\a', '\x6', 
		'\x2', '\x2', '@', 'K', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x5', 
		'\xE', '\b', '\x2', '\x42', '\x43', '\a', '\x6', '\x2', '\x2', '\x43', 
		'K', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x5', '\x18', '\r', 
		'\x2', '\x45', '\x46', '\a', '\x6', '\x2', '\x2', '\x46', 'K', '\x3', 
		'\x2', '\x2', '\x2', 'G', 'H', '\x5', '\x1E', '\x10', '\x2', 'H', 'I', 
		'\a', '\x6', '\x2', '\x2', 'I', 'K', '\x3', '\x2', '\x2', '\x2', 'J', 
		':', '\x3', '\x2', '\x2', '\x2', 'J', ';', '\x3', '\x2', '\x2', '\x2', 
		'J', '<', '\x3', '\x2', '\x2', '\x2', 'J', '=', '\x3', '\x2', '\x2', '\x2', 
		'J', '>', '\x3', '\x2', '\x2', '\x2', 'J', '\x41', '\x3', '\x2', '\x2', 
		'\x2', 'J', '\x44', '\x3', '\x2', '\x2', '\x2', 'J', 'G', '\x3', '\x2', 
		'\x2', '\x2', 'K', '\v', '\x3', '\x2', '\x2', '\x2', 'L', 'P', '\a', '\a', 
		'\x2', '\x2', 'M', 'O', '\x5', '\n', '\x6', '\x2', 'N', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'R', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', '\b', 
		'\x2', '\x2', 'T', '\r', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', '\x1D', 
		'\x2', '\x2', 'V', 'W', '\a', '\t', '\x2', '\x2', 'W', 'X', '\x5', '\x1E', 
		'\x10', '\x2', 'X', '\xF', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', 
		'\n', '\x2', '\x2', 'Z', '[', '\a', '\x3', '\x2', '\x2', '[', '\\', '\x5', 
		'\x1E', '\x10', '\x2', '\\', ']', '\a', '\x4', '\x2', '\x2', ']', '`', 
		'\x5', '\n', '\x6', '\x2', '^', '_', '\a', '\v', '\x2', '\x2', '_', '\x61', 
		'\x5', '\n', '\x6', '\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '`', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x61', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x63', '\a', '\f', '\x2', '\x2', '\x63', '\x64', '\a', 
		'\x3', '\x2', '\x2', '\x64', '\x65', '\x5', '\xE', '\b', '\x2', '\x65', 
		'\x66', '\a', '\x6', '\x2', '\x2', '\x66', 'g', '\x5', '\x1E', '\x10', 
		'\x2', 'g', 'h', '\a', '\x6', '\x2', '\x2', 'h', 'i', '\x5', '\xE', '\b', 
		'\x2', 'i', 'j', '\a', '\x4', '\x2', '\x2', 'j', 'k', '\x5', '\f', '\a', 
		'\x2', 'k', '\x13', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\a', '\r', 
		'\x2', '\x2', 'm', 'n', '\x5', '\x1E', '\x10', '\x2', 'n', '\x15', '\x3', 
		'\x2', '\x2', '\x2', 'o', 't', '\x5', '\x1E', '\x10', '\x2', 'p', 'q', 
		'\a', '\x5', '\x2', '\x2', 'q', 's', '\x5', '\x1E', '\x10', '\x2', 'r', 
		'p', '\x3', '\x2', '\x2', '\x2', 's', 'v', '\x3', '\x2', '\x2', '\x2', 
		't', 'r', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 
		'u', '\x17', '\x3', '\x2', '\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'x', '\a', '\xE', '\x2', '\x2', 'x', 'y', '\a', '\x3', '\x2', 
		'\x2', 'y', 'z', '\x5', '\x1E', '\x10', '\x2', 'z', '{', '\a', '\x4', 
		'\x2', '\x2', '{', '\x19', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x5', 
		'\x1C', '\xF', '\x2', '}', '~', '\a', '\x1D', '\x2', '\x2', '~', '\x7F', 
		'\a', '\x6', '\x2', '\x2', '\x7F', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x81', '\a', '\xF', '\x2', '\x2', '\x81', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x83', '\b', '\x10', '\x1', '\x2', '\x83', '\x84', 
		'\a', '\x10', '\x2', '\x2', '\x84', '\x94', '\x5', '\x1E', '\x10', '\f', 
		'\x85', '\x86', '\a', '\x11', '\x2', '\x2', '\x86', '\x94', '\x5', '\x1E', 
		'\x10', '\v', '\x87', '\x94', '\a', '\x1D', '\x2', '\x2', '\x88', '\x94', 
		'\a', '\x1E', '\x2', '\x2', '\x89', '\x8A', '\a', '\x3', '\x2', '\x2', 
		'\x8A', '\x8B', '\x5', '\x1E', '\x10', '\x2', '\x8B', '\x8C', '\a', '\x4', 
		'\x2', '\x2', '\x8C', '\x94', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', 
		'\a', '\x1D', '\x2', '\x2', '\x8E', '\x90', '\a', '\x3', '\x2', '\x2', 
		'\x8F', '\x91', '\x5', '\x16', '\f', '\x2', '\x90', '\x8F', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x91', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x94', '\a', '\x4', '\x2', '\x2', 
		'\x93', '\x82', '\x3', '\x2', '\x2', '\x2', '\x93', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x93', '\x87', '\x3', '\x2', '\x2', '\x2', '\x93', '\x88', 
		'\x3', '\x2', '\x2', '\x2', '\x93', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x93', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x94', '\xA6', '\x3', '\x2', 
		'\x2', '\x2', '\x95', '\x96', '\f', '\n', '\x2', '\x2', '\x96', '\x97', 
		'\t', '\x2', '\x2', '\x2', '\x97', '\xA5', '\x5', '\x1E', '\x10', '\v', 
		'\x98', '\x99', '\f', '\t', '\x2', '\x2', '\x99', '\x9A', '\t', '\x3', 
		'\x2', '\x2', '\x9A', '\xA5', '\x5', '\x1E', '\x10', '\n', '\x9B', '\x9C', 
		'\f', '\b', '\x2', '\x2', '\x9C', '\x9D', '\t', '\x4', '\x2', '\x2', '\x9D', 
		'\xA5', '\x5', '\x1E', '\x10', '\t', '\x9E', '\x9F', '\f', '\a', '\x2', 
		'\x2', '\x9F', '\xA0', '\a', '\x19', '\x2', '\x2', '\xA0', '\xA1', '\x5', 
		'\x1E', '\x10', '\x2', '\xA1', '\xA2', '\a', '\x1A', '\x2', '\x2', '\xA2', 
		'\xA3', '\x5', '\x1E', '\x10', '\b', '\xA3', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\x95', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\x9B', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xE', '\"', '$', '*', '\x34', 'J', 
		'P', '`', 't', '\x90', '\x93', '\xA4', '\xA6',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
