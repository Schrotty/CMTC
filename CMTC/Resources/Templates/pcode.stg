file(symbols) ::= <<
@.str = private unnamed_addr constant [5 x i8] c"%d\0D\0A\00"

<symbols>

declare i32 @printf(i8*, ...)
>>

// variable templates
// do not touch 'symbol'!!!
symbol(symbol) ::= <%
<if(symbol.GlobalSymbol)>@<symbol.Name>
<elseif(symbol.Position)>%<symbol.Position>
<else><symbol>
<endif>
%>

symbolDeclaration(symbol) ::= <<
<if(symbol.GlobalSymbol)><globalSymbolDeclaration(symbol)>
<else><localSymbolDeclaration(symbol)><endif><\n>
>>

globalSymbolDeclaration(symbol) ::= <<
<symbol(symbol)> = common global <typeMap.(symbol.Type)> <typeDefaultValues.(symbol.Type)>
>>

localSymbolDeclaration(symbol) ::= <<
<symbol(symbol)> = alloca <typeMap.(symbol.Type)>
>>

// function templates
function(function, block) ::= <<
define <typeMap.(function.Type)> @<function.Name>(<parameterList(function.Parameter)>)
{
	<block>
}
<\n>
>>

block(stats) ::= <<
<stats>
>>

parameterList(parameter) ::= <<
<if(parameter)><trunc(parameter):parameter()><typeMap.(last(parameter))><endif>
>>

parameter(parameter) ::= <<
<typeMap.(parameter)>, 
>>

// statement & expression templates
statement(statement) ::= <<
<statement>
>>

expression(expr) ::= <<
<expr>
>>

returnStatement(symbol, expression) ::= <<
<expression>
ret <typeMap.(symbol.Type)> <symbol(symbol)>
>>

plainReturnStatement(integer) ::= <<
ret i32 <integer>
>>

methodCallExpr(symbol, method, parameter) ::= <<
<symbol(symbol)> = call <typeMap.(method.Type)> @<method.Name>(<if(parameter)><param(parameter)><endif>)
>>

param(parameter) ::= "<trunc(parameter):para()><typeMap.(last(parameter).Key)> <last(parameter).Value>"
para(parameter) ::= "<typeMap.(parameter.Key)> <symbol(parameter.Value)>, "

storeStat(target, source, expression) ::= <%
<expression>
store <typeMap.(target.Type)> <symbol(source)>, <typeMap.(target.Type)>* <symbol(target)><\n>
%>

assignStat(target, source) ::= <<
<symbol(target)> = load <typeMap.(target.Type)>, <typeMap.(target.Type)>* <symbol(source)><\n>
>>

printf(target, value, expression) ::= <<
<expression>
<symbol(target)> = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 <symbol(value)>)<\n>
>>

addSubExpr(target, op, op1, op2) ::= <<
<symbol(target)> = <opMap.(op)> <typeMap.(target.Type)> <symbol(op1)>, <symbol(op2)><\n>
>>

compareExpr(target, op, op1, op2) ::= <<
<symbol(target)> = icmp <opMap.(op)> <typeMap.(target.Type)> <symbol(op1)>, <symbol(op2)><\n>
>>

boolCast(target, caster) ::= <<
<symbol(target)> = zext i1 <symbol(caster)> to <typeMap.(caster.Type)><\n>
>>

branch(expr, first, second) ::= <<
br i1 <symbol(expr)>, label %<first>, label %<second><\n>
>>

branchToLabel(target) ::= <<
br label %<target><\n>
>>

label(label) ::= <<
<\n>; \<label>:<label>:<\n>
>>

//if-statement
condition(ifElse) ::= <<
<if(ifElse)><conditionElse()><else><conditionPlain()><endif>
>>

conditionPlain(expr, exprResult, ifStat, first, jmpFirst, second, jmpSecond) ::= <%
<expr>
<branch(exprResult, jmpFirst, jmpSecond)>
<label(first)>
<ifStat>
<branchToLabel(second)>
<label(second)>
%>

conditionElse(expr, exprResult, ifStat, elseStat, first, jmpFirst, second, jmpSecond, third) ::= <%
<expr>
<branch(exprResult, jmpFirst, jmpSecond)>
<label(first)>
<ifStat>
<branchToLabel(third)>
<label(second)>
<elseStat>
<branchToLabel(third)>
<label(third)>
%>

forLoop(init, header, headerExpr, headerResult, body, bodyStat, exit, footer, footerStat) ::= <%
<init>
<branchToLabel(header)>
<label(header)>
<headerExpr>
<branch(headerResult, body, exit)>
<label(body)>
<bodyStat>
<branchToLabel(footer)>
<label(footer)>
<footerStat>
<branchToLabel(header)>
<label(exit)>
%>

IsNull ::= ["": true, default: false]

// ops & type maps
opMap ::= [
	"+":"add",
	"-":"sub",
	"*" : "mul",
	"/" : "udiv",
	"==" : "eq",
	"!=" : "ne",
	">" : "sgt",
	"<" : "slt"
]

typeMap ::= [
	"INT":"i32",
	"INT_P":"i32",
	"BOOL":"i1",
	"VOID":"void"
]

typeDefaultValues ::= [
	"INT":"0"
]