<TemplateLibrary product="GhostDoc Pro" format="1.0">
  <Name>CMTC</Name>
  <Company>CMTC</Company>
  <Author>Ruben Maurer</Author>
  <ModificationDate>20.12.2018</ModificationDate>
  <Email>rubenmaurer@live.de</Email>
  <Version>18.1.18330</Version>
  <Rules>
    <Rule Name="FileDefaultRule">&lt;#@ template language="C#" #&gt;
// ***********************************************************************
// Assembly         : &lt;#= !String.IsNullOrEmpty(Context.FileHeaderExistingAssembly) ? Context.FileHeaderExistingAssembly : Context.AssemblyName #&gt;
// Author           : &lt;#= !String.IsNullOrEmpty(Context.FileHeaderExistingAuthor) ? Context.FileHeaderExistingAuthor : Context.GetGlobalProperty("UserName") #&gt;
// Created          : &lt;#= !String.IsNullOrEmpty(Context.FileHeaderExistingCreatedDate) ? Context.FileHeaderExistingCreatedDate : Context.DestinationFileCreationDateTime.ToString("MM-dd-yyyy") #&gt;
//
// Last Modified By : &lt;#= !String.IsNullOrEmpty(Context.FileHeaderExistingLastModifiedUser) ? Context.FileHeaderExistingLastModifiedUser : Context.GetGlobalProperty("UserName") #&gt;
// Last Modified On : &lt;#= Context.DestinationFileModificationDateTime.ToString("MM-dd-yyyy") #&gt;
// ***********************************************************************
// &lt;copyright file="&lt;#= System.IO.Path.GetFileName(Context.DestinationFile) #&gt;" company="&lt;#= !String.IsNullOrEmpty(Context.FileHeaderExistingCopyrightCompany) ? Context.FileHeaderExistingCopyrightCompany : !String.IsNullOrEmpty(Context.AssemblyCompany) ? Context.AssemblyCompany : Context.GetGlobalProperty("CompanyName") #&gt;"&gt;
//     &lt;#= !String.IsNullOrEmpty(Context.GetExistingTagText("copyright")) ? Context.GetExistingTagText("copyright") : !String.IsNullOrEmpty(Context.AssemblyCopyright) ? Context.AssemblyCopyright : "Copyright (c) " + Context.GetGlobalProperty("CompanyName") + ". All rights reserved." #&gt;
// &lt;/copyright&gt;
&lt;# GenerateSummaryText(); #&gt;
&lt;# GenerateRemarksText(); #&gt;
// ***********************************************************************

&lt;#+
	private void GenerateSummaryText()
	{
    	string existingSummaryText = Context.GetExistingTagText("summary");
		if(!String.IsNullOrEmpty(existingSummaryText))
		{ 
      		string[] lines = existingSummaryText.Split(new string[] { Environment.NewLine, @"\r", @"\n" }, StringSplitOptions.RemoveEmptyEntries);
			if(lines != null &amp;&amp; lines.Length &gt; 1)
			{ #&gt;
// &lt;summary&gt;
&lt;#+				for(int i = 0; i &lt; lines.Length; i++)
				{ #&gt;
// &lt;#= lines[i].Trim() #&gt;
&lt;#+				}#&gt;
// &lt;/summary&gt;
&lt;#+				}
				else
				{ #&gt;
// &lt;summary&gt;&lt;#= existingSummaryText #&gt;&lt;/summary&gt;
&lt;#+				}
		}	
		else
		{ #&gt;
// &lt;summary&gt;&lt;/summary&gt;
&lt;#+		}
 	}

	private void GenerateRemarksText()
	{
    	string existingSummaryText = Context.GetExistingTagText("remarks");
		if(!String.IsNullOrEmpty(existingSummaryText))
		{ 
      		string[] lines = existingSummaryText.Split(new string[] { Environment.NewLine, @"\r", @"\n" }, StringSplitOptions.RemoveEmptyEntries);
			if(lines != null &amp;&amp; lines.Length &gt; 0)
			{ #&gt;
// &lt;remarks&gt;
&lt;#+				for(int i = 0; i &lt; lines.Length; i++)
				{ #&gt;
// &lt;#= lines[i].Trim() #&gt;
&lt;#+				}#&gt;
// &lt;/remarks&gt;
&lt;#+				}
				else
				{ #&gt;
// &lt;remarks&gt;&lt;#= existingSummaryText #&gt;&lt;/remarks&gt;
&lt;#+				}
		}
 	}
#&gt;</Rule>
  </Rules>
</TemplateLibrary>